#
# Copyright  1990-2009 Sun Microsystems, Inc. All Rights Reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License version
# 2 only, as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License version 2 for more details (a copy is
# included at /legal/license.txt).
#
# You should have received a copy of the GNU General Public License
# version 2 along with this work; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
# 02110-1301 USA
#
# Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa
# Clara, CA 95054 or visit www.sun.com if you need additional
# information or have any questions.
#

# set USE_VS2005 to true for VC8, VC9
USE_VS2005 ?= true

.PHONY: all pre_target local_vc post_target JAVACALL_EXTRA_LIBS

all: pre_target javacall_common local_vc post_target

ifeq ($(JAVACALL_DIR),)
$(error JAVACALL_DIR is not set.)
endif

ifneq ($(findstring CYGWIN, $(shell uname)), CYGWIN)
    define fixcygpath
    echo $(1)
    endef
else
    USE_CYGWIN = true
    HOST_OS = win32
    define fixcygpath
    cygpath -m $(1)
    endef
endif

include $(JAVACALL_DIR)/build/common.gmk

TEMP_OBJECTS1=$(patsubst %.c,%.obj,$(PORTING_SOURCE))
TEMP_OBJECTS=$(patsubst %.cpp,%.obj,$(TEMP_OBJECTS1))
ifneq ($(FILTER_OBJECTS)x,x)
PORTING_OBJECTS+=$(filter-out $(FILTER_OBJECTS),$(TEMP_OBJECTS))
else # ifneq ($(FILTER_OBJECTS)x,x)
PORTING_OBJECTS+=$(TEMP_OBJECTS)
endif # ifneq ($(FILTER_OBJECTS)x,x)

ifeq ($(USE_NATIVE_AMS_UI), true)

ifneq ($(FILTER_OBJECTS_NAMS_UI)x,x)
NAMS_UI_OBJECTS+=$(filter-out $(FILTER_OBJECTS_NAMS_UI),$(TEMP_OBJECTS))
else
NAMS_UI_OBJECTS+=$(TEMP_OBJECTS)
endif

endif

NOTIFIER_OBJECTS=$(patsubst %.c,%.obj,$(NOTIFIER_SOURCE))

ifneq ($(UTILITIES)x, x)
UTILITY_OBJECTS=$(addsuffix .obj,$(UTILITIES))
endif

ifneq ($(NOTIFIER_OBJECTS)x,x)
NOTIFIERS_LIB=$(JAVACALL_OUTPUT_LIB_DIR)/notifiers$(BUILD_EXT).lib
EXTRA_LDFLAGS+=$(NOTIFIERS_LIB)
endif
PROPERTY_OBJECTS=$(addsuffix .obj,$(PROPERTY_FILES))

TARGET_VM ?= cldc

ifeq ($(USE_NATIVE_AMS_UI), true)

ifeq ($(TARGET_VM), cldc)

local_vc: $(NOTIFIERS_LIB) $(JAVACALL_OUTPUT_LIB_DIR)/javacall$(BUILD_EXT).lib \
    $(JAVACALL_OUTPUT_LIB_DIR)/javacall_nams_ui$(BUILD_EXT).lib \
    $(JAVACALL_OUTPUT_LIB_DIR)/cldc_javanotify_stubs.obj

else

local_vc: $(NOTIFIERS_LIB) $(JAVACALL_OUTPUT_LIB_DIR)/javacall$(BUILD_EXT).lib \
    $(JAVACALL_OUTPUT_LIB_DIR)/javacall_nams_ui$(BUILD_EXT).lib

endif

else

ifeq ($(TARGET_VM), cldc)

local_vc: $(NOTIFIERS_LIB) $(JAVACALL_OUTPUT_LIB_DIR)/javacall$(BUILD_EXT).lib \
    $(JAVACALL_OUTPUT_LIB_DIR)/cldc_javanotify_stubs.obj

else

local_vc: $(NOTIFIERS_LIB) $(JAVACALL_OUTPUT_LIB_DIR)/javacall$(BUILD_EXT).lib

endif

endif

ifeq ($(VC8CE_ARCH_PATH),)
CC=cl.exe
CXX=cl.exe
RC=rc.exe
else
CC=$(VC8CE_ARCH_PATH)/cl.exe
CXX=$(VC8CE_ARCH_PATH)/cl.exe
RC=$(VC8CE_ARCH_PATH)/../../../bin/rc.exe
CE_CFLAGS = -D_WIN32_WCE=$(CE_VERSION) -DUNDER_CE=$(CE_VERSION) -D_CE_ALLOW_SINGLE_THREADED_OBJECTS_IN_MTA
CE_CFLAGS += -I"$(WINCE_INCLUDE_PATH)"
CE_CFLAGS += -I$(WMSDK10_INCLUDE_PATH)
CE_CFLAGS += -I$(VC8CE_ATLMFC_INCLUDE_PATH)
CE_CFLAGS += -I$(VC8CE_INCLUDE_PATH)
CE_CFLAGS += /D $(CE_PLATFORM)
ifeq ($(TARGET_WINCE_PLATFORM), WM5_PPC)
CE_CFLAGS += /D WM_PPC_ONLY
else
ifeq ($(TARGET_WINCE_PLATFORM), WM6_PPC)
CE_CFLAGS += /D WM_PPC_ONLY
endif
endif
endif

LOCAL_CFLAGS_debug = -MDd -Gm -EHsc -Zi -Od -D_DEBUG -D_LIB -FD -W3
LOCAL_CFLAGS_nodebug = -MD -EHsc -O2 -D_LIB -W3

CXXFLAGS+= -nologo $(LOCAL_CFLAGS_$(BUILD))
CFLAGS+= -nologo $(LOCAL_CFLAGS_$(BUILD))
CPPFLAGS+= -I`$(call fixcygpath, $(JAVACALL_OUTPUT_INCLUDE_DIR))`
CPPFLAGS+= $(SPECIFIC_DEFINITIONS)

ADDITIONAL_RC_INCLUDE_DIRS += $(RESOURCE_IMAGES_DIR)
RCFLAGS += $(foreach dir,$(ADDITIONAL_RC_INCLUDE_DIRS),/i`$(call fixcygpath, $(dir))`)

ifeq ($(VC8CE_ARCH_PATH),)
AR=lib.exe
else
AR=$(VC8CE_ARCH_PATH)/lib.exe
endif
ifeq ($(TARGET_CPU),arm)
ifeq ($(VC8CE_ARCH_PATH),)
ARFLAGS=-nologo -MACHINE:ARM
else
ARFLAGS=/nologo /MACHINE:ARM
endif
else
ARFLAGS=-nologo -MACHINE:X86
ifeq ($(USE_VS2005), true)
LOCAL_CFLAGS_$(BUILD) += /D_CRT_SECURE_NO_DEPRECATE /D_CRT_NONSTDC_NO_DEPRECATE
LOCAL_CFLAGS_debug += -RTC1
else
LOCAL_CFLAGS_debug += -GZ
endif
endif

LOCAL_CFLAGS_$(BUILD) += $(PLATFORM_FLAGS)
OUTPUT_OPTION=-Fo`$(call fixcygpath, $@)` \
              -Fp$(JAVACALL_OUTPUT_OBJ_DIR)/javacall \
              -Fd$(JAVACALL_OUTPUT_OBJ_DIR)/javacall

$(JAVACALL_OUTPUT_LIB_DIR)/%.res: %.rc
	@echo "...compiling resources ... "
	$(AT)$(RC) $(RCFLAGS) /l 0x409 /d "NDEBUG" /fo`$(call fixcygpath, $@)` `$(call fixcygpath, $<)`

$(JAVACALL_OUTPUT_OBJ_DIR)/%.obj: %.cpp
	@echo -n "...compiling: "
	$(AT)$(COMPILE.cc) $(OUTPUT_OPTION) `$(call fixcygpath, $<)`

$(JAVACALL_OUTPUT_OBJ_DIR)/%.obj: %.c
	@echo -n "...compiling: "
	$(AT)$(COMPILE.c) $(OUTPUT_OPTION) `$(call fixcygpath, $<)`

$(JAVACALL_OUTPUT_OBJ_DIR)/javacall_static_properties.obj: $(STATIC_PROPERTIES_C)
	@echo -n "...compiling: "
	$(AT)$(COMPILE.c) $(OUTPUT_OPTION) `$(call fixcygpath, $<)`

JAVACALL_EXTRA_LIBS::

ifeq ($(USE_NATIVE_AMS_UI), true)

$(JAVACALL_OUTPUT_LIB_DIR)/javacall_nams_ui$(BUILD_EXT).lib: \
	$(patsubst %,$(JAVACALL_OUTPUT_OBJ_DIR)/%,$(NAMS_UI_OBJECTS)) \
	$(patsubst %,$(JAVACALL_OUTPUT_OBJ_DIR)/%,$(UTILITY_OBJECTS)) \
	$(patsubst %,$(JAVACALL_OUTPUT_OBJ_DIR)/%,$(PROPERTY_OBJECTS)) \
	$(SPECIFIC_OBJECTS)
	@echo "...Generating Library: $@"
	@$(AR) -out:`$(call fixcygpath, $@)` $(ARFLAGS) `$(call fixcygpath, $^ $(ADDITIONAL_LIBS))`

endif

$(JAVACALL_OUTPUT_LIB_DIR)/javacall$(BUILD_EXT).lib: \
	$(patsubst %,$(JAVACALL_OUTPUT_OBJ_DIR)/%,$(PORTING_OBJECTS)) \
	$(patsubst %,$(JAVACALL_OUTPUT_OBJ_DIR)/%,$(UTILITY_OBJECTS)) \
	$(patsubst %,$(JAVACALL_OUTPUT_OBJ_DIR)/%,$(PROPERTY_OBJECTS)) \
	$(SPECIFIC_OBJECTS)
	@echo "...Generating Library: $@"
	$(AT)$(AR) -out:`$(call fixcygpath, $@)` $(ARFLAGS) `$(call fixcygpath, $^ $(ADDITIONAL_LIBS))`
	$(AT)$(MAKE) JAVACALL_EXTRA_LIBS

$(JAVACALL_OUTPUT_LIB_DIR)/notifiers$(BUILD_EXT).lib: \
	$(patsubst %,$(JAVACALL_OUTPUT_OBJ_DIR)/%,$(NOTIFIER_OBJECTS))
	@echo "...Generating Library: $@"
	$(AT)$(AR) -out:`$(call fixcygpath, $@)` $(ARFLAGS) `$(call fixcygpath, $^)`

ifeq ($(TARGET_VM), cldc)

$(JAVACALL_OUTPUT_LIB_DIR)/cldc_javanotify_stubs.obj: $(JAVACALL_OUTPUT_OBJ_DIR)/cldc_javanotify_stubs.obj
	@echo "...Coping stubs to lib directory ..."
	$(AT)cp $(JAVACALL_OUTPUT_OBJ_DIR)/cldc_javanotify_stubs.obj $(JAVACALL_OUTPUT_LIB_DIR)

endif
